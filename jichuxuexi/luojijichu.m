%逻辑运算符
%运算方法   函数名   运算符   运算规则
%逻辑与      and      &    都为1时返回1，只要有一个是0返回0
%逻辑或      or       |    只要有一个为1返回1，都是0时返回0
%逻辑非      not      ~    原来为1时返回0，为0时返回1
%逻辑异或    xor      无   不相同时取1，相同时取0
%推荐直接使用运算符进行计算，以“&”为例：
%（1）针对矩阵运算时：“逻辑与&”是对A和B进行计算的，计算时会比较A和B对应位置的元素。需要符合算术运算中介绍的五种兼容模式
%（2）“逻辑与&”不仅可以作用在逻辑值0和1上，还可以用于普通的数值上，这时候，matlab会将非零数值视为逻辑1，将数值零视为逻辑0进行运算
%（3）“逻辑与&”也可以进行连续运算，例如1&2&3
%（4）为避免运算优先级的问题，直接使用小括号来指定计算顺序
A=randi([-3,3],2,4);
B=randi([-3,3],1,4);
A&B;
A|B;
~A;
xor(3,4);
xor(A,B);
3>4&2>-1;
(3>4)&2>-1; %算术运算符优先级比逻辑运算符高
%例题：随机生成20名同学的单科成绩（假设成绩为满分100分的整数制），现需要从中找到成绩等级为良（成绩在区间[60,80)内）的同学。如果要找出[0,60)∪[80,100]分的同学呢？
score=randi([0,100],1,20);
res1=(60<=score)&(score<80); %在score矩阵中如果某位置上的成绩大于等于60小于80，就会在该位置上写上1，否则为0，最后形成01矩阵res
res2=~res1; %找出[0,60)∪[80,100]分的同学，即不是良的同学，即非res1
res=((0<=score)&(score<60))|((80<=score)&(score<=100));
% &&和||只能对标量（只有一个元素）进行逻辑运算，不能对有多个元素的向量或者矩阵进行运算，而&和|可以
% &&和||进行逻辑运算时具有短路功能，可以提高运行效率：
% 计算A&&B时，如果A为逻辑0，则B不会被判断，因为最后的结果一定是逻辑0
% 计算A||B时，如果A为逻辑1，则B不会被判断，因为最后的结果一定是逻辑1

%逻辑运算函数
% 函数名       作用
%  all         判断数组元素是否全为非零值（可指定沿什么维度判断），全为非零值是返回逻辑1，否则返回逻辑0
%  any         判断数组元素是否存在至少一个非零值（可指定沿什么维度判断），是的话返回逻辑1，否则返回逻辑0
%  find        查找数组中的非零元素，并返回其索引
% all函数和any函数的用法类似，以all函数为例，用法如下：
%如果A是一个矩阵，那么all(A,dim)沿着dim维来判断元素是否全为非零值
% dim等于1时沿着行方向来判断每一列是否全为非零值，并将结果返回为一个全为逻辑值的行向量，可以直接简写成all(A)
% dim等于2时沿着列方向来判断每一行是否全为非零值，并将结果返回为一个全为逻辑值的列向量
a=randi([0,10],2,5);
all(a); %未设置维度时，判断所有元素是否为非零值
all(a,1); 
all(a,2);
any(a);
any(a,1);
any(a,2);
%例题：请随机生成一个100行3列的矩阵，用来记录学生的考试成绩：矩阵每一行代表一名同学，每一列代表一门科目的成绩，矩阵中的每个元素都是区间[50,100]内的随机整数
%（1）请指出哪些同学挂科了，至少有一门科目没过60分就算挂科。要求返回一个包含100个元素的逻辑向量，逻辑值1的位置对应的同学挂科了。
%（2）这三门科目中是否存在科目没有人挂科（所有同学的这一门科目的成绩都高于60分）。要求返回一个包含3个元素的逻辑向量，元素逻辑1的位置对应的科目表示没有人挂科。
s=randi([0,100],10,3)
any(s<60,2)
all(s>=60,1)
%find函数
% k=find(x)返回一个包含矩阵x中每个非零元素的线性索引的向量
%如果x为向量，则find返回方向与x相同的向量
%如果x为多维数组，则find返回由结果的线性索引组成的列向量
% k=find(x,n,direction)
% direction默认为first，返回与x中分非零元素对应的前n个索引
% direction=last时，返回与x中的非零元素对应的后最后n个索引
% [row,col]=find()使用前面的语法中的任何输入参数返回数组x中每个非零元素的行和列下标
% [row,col,v]=find()还返回包含x的非零元素的向量v
b=randi([-1,2],3,2)
k1=find(b)
k2=find(b,2,"last")
[row,col]=find(b);
[row,col,v]=find(b)